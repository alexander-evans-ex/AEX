---
alwaysApply: true
---
# rules.mdc

## üß≠ Project Guardrails (Read First)
- **Purpose:** Google Apps Script Web App to accept POST ticket requests and return typed GET data from Google Sheets tabs.
- **Absolutely do not:**
  - Change the Google Sheet ID unless explicitly asked.
  - Rename or remove any existing sheet tabs: `AEXMain`, `AEXData`, `AEXShows`, `AEXProjects`, `AEXProducts`.
  - Break the current JSON response shapes or field names.
  - Add external network calls or 3P libraries (Apps Script only).
- **When in doubt:** Keep current behavior; add features behind new functions or optional params.

---

## üì¶ Tech Stack & Files
- **Runtime:** Google Apps Script (Server-side JavaScript).
- **Entrypoints:** `doPost(e)`, `doGet(e)`.
- **Helpers:** `addToSheet`, `sendConfirmationEmail`, `sheetToObjectsGeneric`, `sheetToObjectsWithSchema`, `coerce`, `normalizeKey`, `respondJSON`.

---

## üîê Configuration
- `const SHEET_ID = '174rUENhBQ6SZ89yPZWTaP4wISWU0GXbxDJLOPR00DsU';`  
  Do not change unless instructed.
- Allowed tabs:  
  `const ALLOWED_TABS = ['AEXMain','AEXData','AEXShows','AEXProjects','AEXProducts'];`

---

## üìë Data Contracts (Schemas)

### AEXData
Headers: `mainSection, mainSectionImages, vid1, vid2, vid3, aboutInfo`  
Typing:
- `mainSection` ‚Üí string  
- `mainSectionImages` ‚Üí array (split on commas/newlines)  
- `vid1`, `vid2`, `vid3`, `aboutInfo` ‚Üí string

### AEXShows
Headers: `showId, showActive, showImage, showName, showDesc, showDate, showTime, showLocation`  
Typing:
- `showId` ‚Üí string  
- `showActive` ‚Üí boolean (`true/yes/1` => true)  
- Others ‚Üí string

### AEXProjects
Headers: `projectId, projectActive, projectImage, projectName, projectText, projectVideo, projectImages`  
Typing:
- `projectId, projectImage, projectName, projectText, projectVideo` ‚Üí string  
- `projectActive` ‚Üí boolean (`true/yes/1` => true)
- `projectImages` ‚Üí array (split commas/newlines)

### AEXProducts
Headers: `productId, productActive, imageUrl, productName, productDesc, productPrice, productSizes, productQty, stripeProductId`  
Typing:
- `productId, imageUrl, productName, productDesc, stripeProductId` ‚Üí string  
- `productActive` ‚Üí boolean  
- `productPrice, productQty` ‚Üí number (parse numeric cells/strings)  
- `productSizes` ‚Üí array (split commas/newlines)

### AEXMain
- No fixed schema; use first row as headers ‚Üí generic objects (keys normalized: spaces ‚Üí `_`, non-word chars removed, leading digits prefixed).

### AEXData
Headers: `mainSection, mainSectionImages, vid1, vid2, vid3, aboutInfo`  
Typing:
- `mainSection, vid1, vid2, vid3, aboutInfo` ‚Üí string  
- `mainSectionImages` ‚Üí array (split commas/newlines)

**Example AEXData structure:**
```javascript
{
  mainSection: "Welcome to Alexander Evans Experience",
  mainSectionImages: ["image1.jpg", "image2.jpg"],
  vid1: "https://alexanderevansexs.s3.us-east-2.amazonaws.com/videos/RECAP-4.mov",
  vid2: "https://example.com/video2.mp4", 
  vid3: "https://example.com/video3.mp4",
  aboutInfo: "Innovative design and craftsmanship"
}
```

**Usage:**
- `vid1` is used for the main video in the video section
- `mainSectionImages` provides images for the main section
- `aboutInfo` contains the about section content

---

## üåê API Contracts

### POST `/exec`
**Body (JSON):**
```json
{
  "email": "user@example.com",
  "timestamp": "ISO-8601 optional",
  "source": "AEX",
  "tab": "AEXMain | AEXData | AEXShows | AEXProjects | AEXProducts (optional; default AEXMain)"
}
